# -*- coding: utf-8 -*-
"""Employee Performance Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Q3f6s_qfFnDT06QUkD4V1szmjbZrEGQ

**Vedant Modak**
  | BE(IT) undergrad @ PES Modern College of Engineering,Pune.

**Employee Performance Analysis**

**Importing necessary libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/EPA.csv')

df.head()

df.tail()

df.shape

"""**Cleaning the dataset**"""

df.info()

df = df.drop_duplicates()

df.isnull().sum()

df.describe()

"""**Removing Outliers**"""

sns.boxplot(df['Age'])

sns.boxplot(df['DailyRate'])

sns.boxplot(df['DistanceFromHome'])

sns.boxplot(df['Education'])

df['Attrition'].value_counts().plot(kind='bar')

sns.relplot(x = "MonthlyIncome", y = "Age", hue= "Attrition", data =df);

sns.relplot(x = "MonthlyIncome", y = "Age", hue= "Gender", data =df);

sns.relplot(x = "MonthlyIncome", y = "Age", hue= "MaritalStatus", data =df);

"""Males make more money as the age increases"""

df.corr()

plt.figure(figsize=(18, 12))
sns.heatmap(df.corr())

df=df.drop("EmployeeCount",axis='columns')
df=df.drop("EmployeeNumber",axis='columns')
df=df.drop("Over18",axis='columns')
df=df.drop("StandardHours",axis='columns')
df=df.drop("RelationshipSatisfaction",axis='columns')

df.shape

"""**Encoding textual data into numerical fromat to for modelling**"""

df.columns

df["Attrition"] = df["Attrition"].astype("str")
df["BusinessTravel"] = df["BusinessTravel"].astype("str")
df["Department"] = df["Department"].astype("str")
df["EducationField"] = df["EducationField"].astype("str")
df["Gender"] = df["Gender"].astype("str")
df["JobRole"] = df["JobRole"].astype("str")
df["MaritalStatus"] = df["MaritalStatus"].astype("str")
df["OverTime"] = df["OverTime"].astype("str")

from sklearn.preprocessing import LabelEncoder

encode = LabelEncoder()
label1=encode.fit_transform(df["Attrition"])
label2=encode.fit_transform(df["BusinessTravel"])
label3=encode.fit_transform(df["Department"])
label4=encode.fit_transform(df["EducationField"])
label5=encode.fit_transform(df["Gender"])
label6=encode.fit_transform(df["JobRole"])
label7=encode.fit_transform(df["MaritalStatus"])
label8=encode.fit_transform(df["OverTime"])

df=df.drop("Attrition",axis='columns')
df=df.drop("BusinessTravel",axis='columns')
df=df.drop("Department",axis='columns')
df=df.drop("EducationField",axis='columns')
df=df.drop("Gender",axis='columns')
df=df.drop("JobRole",axis='columns')
df=df.drop("MaritalStatus",axis='columns')
df=df.drop("OverTime",axis='columns')

df.head(2)

df["Attrition"]=label1
df["BusinessTravel"]=label2
df["Department"]=label3
df["EducationField"]=label4
df["Gender"]=label5
df["JobRole"]=label6
df["MaritalStatus"]=label7
df["OverTime"]=label8

df.head(10)

X=df.drop("Attrition",axis='columns')
X

y=df['Attrition']
y.shape

"""**Splitting the datat into train and test**"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.2)
print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)

"""**Lets use a neural netwrok to predict the Attrition**"""

from keras.models import Sequential
from keras.layers import Dense

kerasmodel=Sequential()
kerasmodel.add(Dense(12, input_dim=29, activation='relu'))
kerasmodel.add(Dense(8, activation='relu'))
kerasmodel.add(Dense(1, activation='sigmoid'))

kerasmodel.compile(loss='binary_crossentropy', optimizer='adam',  metrics=['accuracy'])

kerasmodel.fit(X_train, y_train, epochs=150, batch_size=10)

_, accuracy= kerasmodel.evaluate(X_train, y_train)
print('Train Accuracy: %.2f' %  (accuracy*100))

kerasmodel.fit(X_test, y_test, epochs=150, batch_size=10)

_, accuracy_1= kerasmodel.evaluate(X_test, y_test)
print('Test Accuracy: %.2f' %  (accuracy_1*100))

"""**The model is almost 84% accurate !**"""